JsModule {
    interpreter_token: missing (optional),
    directives: JsDirectiveList [],
    items: JsModuleItemList [
        JsExpressionStatement {
            expression: JsAssignmentExpression {
                left: JsUnknownAssignment {
                    items: [
                        JS_REGEX_LITERAL@0..8 "/=0*_:m/" [] [],
                    ],
                },
                operator_token: EQ@8..15 "=" [] [Comments("/*_:|\n")],
                right: missing (required),
            },
            semicolon_token: missing (optional),
        },
    ],
    eof_token: EOF@15..15 "" [] [],
}

0: JS_MODULE@0..15
  0: (empty)
  1: JS_DIRECTIVE_LIST@0..0
  2: JS_MODULE_ITEM_LIST@0..15
    0: JS_EXPRESSION_STATEMENT@0..15
      0: JS_ASSIGNMENT_EXPRESSION@0..15
        0: JS_UNKNOWN_ASSIGNMENT@0..8
          0: JS_REGEX_LITERAL@0..8 "/=0*_:m/" [] []
        1: EQ@8..15 "=" [] [Comments("/*_:|\n")]
        2: (empty)
      1: (empty)
  3: EOF@15..15 "" [] []
--
error[SyntaxError]: Invalid assignment to `/=0*_:m/`
  ┌─ js_regex_assignment.js:1:1
  │
1 │ /=0*_:m/=/*_:|
  │ ^^^^^^^^ This expression cannot be assigned to

--
error[SyntaxError]: expected an expression, or an assignment but instead found ''
  ┌─ js_regex_assignment.js:2:1
  │
2 │ 
  │ ^ Expected an expression, or an assignment here

--
error: unterminated block comment
  ┌─ js_regex_assignment.js:2:1
  │
1 │ /=0*_:m/=/*_:|
  │          -- A block comment starts here
2 │ 
  │ ^ ... but the file ends here

--
/=0*_:m/=/*_:|
